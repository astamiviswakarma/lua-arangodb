--[[ 
  ArangoDB
 
  ArangoDB REST API Interface
 
  OpenAPI spec version: 1.0
  
  Generated by: https://github.com/swagger-api/swagger-codegen.git
]]

--package swagger

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
-- local swagger_documents_api = require "swagger.api.documents_api"

local documents_api= {}
local swagger_mt = {
	__name = "documents_api";
	__index = documents_api;
}

local function new_documents_api(schemes, host, port, basePath, timeout)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	return setmetatable({
		host = host;
		port = port or 80;
		timeout = timeout or 3;
		basePath = basePath or "";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, swagger_mt)
end

function documents_api:api_document_collection_delete(json_request_body, collection, wait_for_sync, return_old, ignore_revs)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s?waitForSync=%s&returnOld=%s&ignoreRevs=%s",
			self.basePath, collection, http_util.encodeURIComponent(wait_for_sync), http_util.encodeURIComponent(return_old), http_util.encodeURIComponent(ignore_revs));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req:set_body(dkjson.encode(json_request_body))


	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_document_collection_patch(json_request_body, collection, keep_null, merge_objects, wait_for_sync, ignore_revs, return_old, return_new)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s?keepNull=%s&mergeObjects=%s&waitForSync=%s&ignoreRevs=%s&returnOld=%s&returnNew=%s",
			self.basePath, collection, http_util.encodeURIComponent(keep_null), http_util.encodeURIComponent(merge_objects), http_util.encodeURIComponent(wait_for_sync), http_util.encodeURIComponent(ignore_revs), http_util.encodeURIComponent(return_old), http_util.encodeURIComponent(return_new));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PATCH")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req:set_body(dkjson.encode(json_request_body))


	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_document_collection_post(collection, json_request_body, collection2, wait_for_sync, return_new, silent)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s?collection=%s&waitForSync=%s&returnNew=%s&silent=%s",
			self.basePath, collection, http_util.encodeURIComponent(collection2), http_util.encodeURIComponent(wait_for_sync), http_util.encodeURIComponent(return_new), http_util.encodeURIComponent(silent));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req:set_body(dkjson.encode(json_request_body))


	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_document_collection_put(json_request_body, collection, wait_for_sync, ignore_revs, return_old, return_new)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s?waitForSync=%s&ignoreRevs=%s&returnOld=%s&returnNew=%s",
			self.basePath, collection, http_util.encodeURIComponent(wait_for_sync), http_util.encodeURIComponent(ignore_revs), http_util.encodeURIComponent(return_old), http_util.encodeURIComponent(return_new));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req:set_body(dkjson.encode(json_request_body))


	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_document_document_handle_delete(document_handle, wait_for_sync, return_old, silent, if_match)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s?waitForSync=%s&returnOld=%s&silent=%s",
			self.basePath, document_handle, http_util.encodeURIComponent(wait_for_sync), http_util.encodeURIComponent(return_old), http_util.encodeURIComponent(silent));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req.headers:upsert("If-Match", if_match)

	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_document_document_handle_get(document_handle, if_none_match, if_match)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s",
			self.basePath, document_handle);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req.headers:upsert("If-None-Match", if_none_match)
	req.headers:upsert("If-Match", if_match)

	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_document_document_handle_head(document_handle, if_none_match, if_match)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s",
			self.basePath, document_handle);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "HEAD")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req.headers:upsert("If-None-Match", if_none_match)
	req.headers:upsert("If-Match", if_match)

	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_document_document_handle_patch(json_request_body, document_handle, keep_null, merge_objects, wait_for_sync, ignore_revs, return_old, return_new, silent, if_match)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s?keepNull=%s&mergeObjects=%s&waitForSync=%s&ignoreRevs=%s&returnOld=%s&returnNew=%s&silent=%s",
			self.basePath, document_handle, http_util.encodeURIComponent(keep_null), http_util.encodeURIComponent(merge_objects), http_util.encodeURIComponent(wait_for_sync), http_util.encodeURIComponent(ignore_revs), http_util.encodeURIComponent(return_old), http_util.encodeURIComponent(return_new), http_util.encodeURIComponent(silent));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PATCH")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req.headers:upsert("If-Match", if_match)
	req:set_body(dkjson.encode(json_request_body))


	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_document_document_handle_put(json_request_body, document_handle, wait_for_sync, ignore_revs, return_old, return_new, silent, if_match)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/document/%s?waitForSync=%s&ignoreRevs=%s&returnOld=%s&returnNew=%s&silent=%s",
			self.basePath, document_handle, http_util.encodeURIComponent(wait_for_sync), http_util.encodeURIComponent(ignore_revs), http_util.encodeURIComponent(return_old), http_util.encodeURIComponent(return_new), http_util.encodeURIComponent(silent));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req.headers:upsert("If-Match", if_match)
	req:set_body(dkjson.encode(json_request_body))


	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function documents_api:api_simple_all_keys_put(json_request_body)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/_api/simple/all-keys",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	if(self.access_token) then
		req.headers:upsert("Authorization", string.format("Bearer %s", self.access_token))
	end

	req:set_body(dkjson.encode(json_request_body))


	-- make the HTTP call
	local headers, stream, errno = req:go(self.timeout)
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		return nil, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_documents_api
}